import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from dotenv import load_dotenv
from storage import get_or_create_alias, get_user_by_alias

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–æ–≤
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
class ReplyState(StatesGroup):
    waiting_for_text = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ‚Äî –∫—Ç–æ –∫–æ–º—É –æ—Ç–≤–µ—á–∞–µ—Ç
admin_reply_targets = {}

# –ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã
quick_replies = [
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å üòä",
    "–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∏ –≤–µ—Ä–Ω—ë–º—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º üîç",
    "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É ‚úÖ"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ –£–¥–∞–ª–∏—Ç—å)
def get_reply_keyboard(alias):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to:{alias}"),
                InlineKeyboardButton(text="üîÅ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç", callback_data=f"quick_reply:{alias}")
            ]
        ]
    )

# ‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ /start
@dp.message(Command("start"))
async def handle_start(message: types.Message):
    alias = get_or_create_alias(message.from_user.id)
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {alias}!\n\n"
        "–¢—ã –Ω–∞–ø–∏—Å–∞–ª(-–∞) –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—é–¥–∞, –∏ –Ω–∞—à–∏ –∞–¥–º–∏–Ω—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç—è—Ç —Ç–µ–±–µ üí¨"
    )
    await message.answer(text)

# ‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –≤ —á–∞—Ç –∞–¥–º–∏–Ω–æ–≤
@dp.message(F.chat.id != ADMIN_CHAT_ID)
async def handle_user_message(message: types.Message):
    user_id = message.from_user.id
    alias = get_or_create_alias(user_id)
    header = f"**{alias}**\n"
    sent = False

    # –¢–µ–∫—Å—Ç
    if message.text:
        await bot.send_message(ADMIN_CHAT_ID, header + message.text, parse_mode="Markdown", reply_markup=get_reply_keyboard(alias))
        sent = True
    # –ú–µ–¥–∏–∞
    elif message.photo:
        await bot.send_photo(ADMIN_CHAT_ID, message.photo[-1].file_id, caption=header, parse_mode="Markdown", reply_markup=get_reply_keyboard(alias))
        sent = True
    elif message.document:
        await bot.send_document(ADMIN_CHAT_ID, message.document.file_id, caption=header, parse_mode="Markdown", reply_markup=get_reply_keyboard(alias))
        sent = True
    elif message.video:
        await bot.send_video(ADMIN_CHAT_ID, message.video.file_id, caption=header, parse_mode="Markdown", reply_markup=get_reply_keyboard(alias))
        sent = True
    elif message.voice:
        await bot.send_voice(ADMIN_CHAT_ID, message.voice.file_id, caption=header, parse_mode="Markdown", reply_markup=get_reply_keyboard(alias))
        sent = True

    if not sent:
        await bot.send_message(ADMIN_CHAT_ID, header + "üìé –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", parse_mode="Markdown", reply_markup=get_reply_keyboard(alias))

# ‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é
@dp.callback_query(F.data.startswith("reply_to:"))
async def handle_reply_button(callback: CallbackQuery, state: FSMContext):
    alias = callback.data.split(":", 1)[1]
    user_id = get_user_by_alias(alias)

    if not user_id:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    admin_reply_targets[callback.from_user.id] = user_id
    await state.set_state(ReplyState.waiting_for_text)
    await callback.message.answer(f"‚úçÔ∏è –ù–∞–ø–∏—à–∏, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º **{alias}**", parse_mode="Markdown")
    await callback.answer()

@dp.message(ReplyState.waiting_for_text)
async def process_admin_reply(message: types.Message, state: FSMContext):
    admin_id = message.from_user.id
    user_id = admin_reply_targets.get(admin_id)

    if not user_id:
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()
        return

    try:
        await bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{message.text}")
        await message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    await state.clear()
    del admin_reply_targets[admin_id]

# üîÅ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
@dp.callback_query(F.data.startswith("quick_reply:"))
async def handle_quick_reply(callback: CallbackQuery):
    alias = callback.data.split(":", 1)[1]
    user_id = get_user_by_alias(alias)

    if not user_id:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    buttons = [
        [InlineKeyboardButton(text=msg[:40], callback_data=f"send_quick:{user_id}:{i}")]
        for i, msg in enumerate(quick_replies)
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("üìå –í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("send_quick:"))
async def send_quick_reply(callback: CallbackQuery):
    parts = callback.data.split(":")
    user_id = int(parts[1])
    index = int(parts[2])

    if index >= len(quick_replies):
        await callback.answer("‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        await bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{quick_replies[index]}")
        await callback.message.answer("‚úÖ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.")
    await callback.answer()

# –°—Ç–∞—Ä—Ç
async def on_startup(dp: Dispatcher):
    await bot.send_message(ADMIN_CHAT_ID, "ü§ñ –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–ø—É—â–µ–Ω!")

async def main():
    await on_startup(dp)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
